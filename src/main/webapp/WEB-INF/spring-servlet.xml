<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

       <!-- 导入连接数据源属性配置文件 -->
       <context:property-placeholder location="classpath*:jdbc.properties" />
       <!--自动注入-->
       <context:annotation-config/>

       <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
       <mvc:annotation-driven />

       <!-- 这样根目录下面的resource的文件(.css,.js等)就不会被spring的DispatchServlet进行过滤 -->
       <mvc:default-servlet-handler/>
       <mvc:resources mapping="/resources/**" location="/WEB-INF/resources/" />
       <!--===============================================================-->
       <mvc:resources mapping="/admin/resources/**" location="/WEB-INF/resources/" />


       <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
       <context:component-scan base-package="com.vizService" />
       <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
             p:prefix="/WEB-INF/views/"
             p:suffix=".jsp" />

       <!-- 配置数据源 -->
       <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
              <property name="driverClassName" value="${jdbc.driverClassName}" />
              <property name="url" value="${jdbc.url}" />
              <property name="username" value="${jdbc.username}" />
              <property name="password" value="${jdbc.password}" />
       </bean>

       <!-- jdbcTemplate uses dataSource -->
       <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
             lazy-init="false" autowire="default" >
              <property name="dataSource">
                     <ref bean="dataSource" />
              </property>
       </bean>

</beans>